#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/spi.h"
#include "hardware/clocks.h"
#include "blink.pio.h"


void reset_target(bool reset)
{
    gpio_put(5, reset ? 0 : 1);
}

void spi_write_byte(uint8_t val)
{
    spi_write_blocking(spi0, &val, 1);
}

uint8_t spi_read_byte()
{
    uint8_t val;
    spi_read_blocking(spi0, 0, &val, 1);
    return val;
}

static const uint8_t em1_bin[] = {
  0x0e, 0xc0, 0x15, 0xc0, 0x14, 0xc0, 0x13, 0xc0, 0x12, 0xc0, 0x11, 0xc0,
  0x10, 0xc0, 0x0f, 0xc0, 0x0e, 0xc0, 0x0d, 0xc0, 0x0c, 0xc0, 0x0b, 0xc0,
  0x0a, 0xc0, 0x09, 0xc0, 0x08, 0xc0, 0x11, 0x24, 0x1f, 0xbe, 0xcf, 0xe5,
  0xd2, 0xe0, 0xde, 0xbf, 0xcd, 0xbf, 0x02, 0xd0, 0x11, 0xc1, 0xe8, 0xcf,
  0x01, 0xd1, 0x00, 0xc0, 0xfd, 0xd0, 0x00, 0xc0, 0xfd, 0xd0, 0x00, 0xc0,
  0xf9, 0xd0, 0x00, 0xc0, 0xf9, 0xd0, 0x00, 0xc0, 0xf5, 0xd0, 0x00, 0xc0,
  0xf5, 0xd0, 0x00, 0xc0, 0xf1, 0xd0, 0x00, 0xc0, 0xf1, 0xd0, 0x00, 0xc0,
  0xed, 0xd0, 0x00, 0xc0, 0xed, 0xd0, 0x00, 0xc0, 0xe9, 0xd0, 0x00, 0xc0,
  0xe9, 0xd0, 0x00, 0xc0, 0xe5, 0xd0, 0x00, 0xc0, 0xe5, 0xd0, 0x00, 0xc0,
  0xe1, 0xd0, 0x00, 0xc0, 0xe1, 0xd0, 0x00, 0xc0, 0xdd, 0xd0, 0x00, 0xc0,
  0xdb, 0xd0, 0x00, 0xc0, 0xdb, 0xd0, 0x00, 0xc0, 0xd7, 0xd0, 0x00, 0xc0,
  0xd7, 0xd0, 0x00, 0xc0, 0xd3, 0xd0, 0x00, 0xc0, 0xd3, 0xd0, 0x00, 0xc0,
  0xd1, 0xd0, 0x00, 0xc0, 0xcd, 0xd0, 0x00, 0xc0, 0xcd, 0xd0, 0x00, 0xc0,
  0xc9, 0xd0, 0x00, 0xc0, 0xc7, 0xd0, 0x00, 0xc0, 0xc7, 0xd0, 0x00, 0xc0,
  0xc3, 0xd0, 0x00, 0xc0, 0xc3, 0xd0, 0x00, 0xc0, 0xc1, 0xd0, 0x00, 0xc0,
  0xbd, 0xd0, 0x00, 0xc0, 0xbb, 0xd0, 0x00, 0xc0, 0xbb, 0xd0, 0x00, 0xc0,
  0xb9, 0xd0, 0x00, 0xc0, 0xb5, 0xd0, 0x00, 0xc0, 0xb3, 0xd0, 0x00, 0xc0,
  0xb3, 0xd0, 0x00, 0xc0, 0xaf, 0xd0, 0x00, 0xc0, 0xaf, 0xd0, 0x00, 0xc0,
  0xad, 0xd0, 0x00, 0xc0, 0xa9, 0xd0, 0x00, 0xc0, 0xa9, 0xd0, 0x00, 0xc0,
  0xa5, 0xd0, 0x00, 0xc0, 0xa3, 0xd0, 0x00, 0xc0, 0xa3, 0xd0, 0x00, 0xc0,
  0x9f, 0xd0, 0x00, 0xc0, 0x9f, 0xd0, 0x00, 0xc0, 0x9d, 0xd0, 0x00, 0xc0,
  0x99, 0xd0, 0x00, 0xc0, 0x97, 0xd0, 0x00, 0xc0, 0x97, 0xd0, 0x00, 0xc0,
  0x93, 0xd0, 0x00, 0xc0, 0x93, 0xd0, 0x00, 0xc0, 0x91, 0xd0, 0x00, 0xc0,
  0x8d, 0xd0, 0x00, 0xc0, 0x8b, 0xd0, 0x00, 0xc0, 0x8b, 0xd0, 0x00, 0xc0,
  0x89, 0xd0, 0x00, 0xc0, 0x85, 0xd0, 0x00, 0xc0, 0x83, 0xd0, 0x00, 0xc0,
  0x83, 0xd0, 0x00, 0xc0, 0x81, 0xd0, 0x00, 0xc0, 0x7d, 0xd0, 0x00, 0xc0,
  0x7b, 0xd0, 0x00, 0xc0, 0x7b, 0xd0, 0x00, 0xc0, 0x77, 0xd0, 0x00, 0xc0,
  0x77, 0xd0, 0x00, 0xc0, 0x75, 0xd0, 0x00, 0xc0, 0x71, 0xd0, 0x00, 0xc0,
  0x71, 0xd0, 0x00, 0xc0, 0x6d, 0xd0, 0x00, 0xc0, 0x6b, 0xd0, 0x00, 0xc0,
  0x6b, 0xd0, 0x00, 0xc0, 0x67, 0xd0, 0x00, 0xc0, 0x67, 0xd0, 0x00, 0xc0,
  0x63, 0xd0, 0x00, 0xc0, 0x63, 0xd0, 0x00, 0xc0, 0x61, 0xd0, 0x00, 0xc0,
  0x5d, 0xd0, 0x00, 0xc0, 0x5d, 0xd0, 0x00, 0xc0, 0x59, 0xd0, 0x00, 0xc0,
  0x59, 0xd0, 0x00, 0xc0, 0x55, 0xd0, 0x00, 0xc0, 0x55, 0xd0, 0x00, 0xc0,
  0x51, 0xd0, 0x00, 0xc0, 0x51, 0xd0, 0x00, 0xc0, 0x4d, 0xd0, 0x00, 0xc0,
  0x4b, 0xd0, 0x00, 0xc0, 0x4b, 0xd0, 0x00, 0xc0, 0x47, 0xd0, 0x00, 0xc0,
  0x47, 0xd0, 0x00, 0xc0, 0x43, 0xd0, 0x00, 0xc0, 0x43, 0xd0, 0x00, 0xc0,
  0x41, 0xd0, 0x00, 0xc0, 0x3d, 0xd0, 0x00, 0xc0, 0x3d, 0xd0, 0x00, 0xc0,
  0x39, 0xd0, 0x00, 0xc0, 0x37, 0xd0, 0x00, 0xc0, 0x37, 0xd0, 0x00, 0xc0,
  0x33, 0xd0, 0x00, 0xc0, 0x33, 0xd0, 0x00, 0xc0, 0x31, 0xd0, 0x00, 0xc0,
  0x2d, 0xd0, 0x00, 0xc0, 0x2b, 0xd0, 0x00, 0xc0, 0x2b, 0xd0, 0x00, 0xc0,
  0x29, 0xd0, 0x00, 0xc0, 0x25, 0xd0, 0x00, 0xc0, 0x23, 0xd0, 0x00, 0xc0,
  0x23, 0xd0, 0x00, 0xc0, 0x21, 0xd0, 0x00, 0xc0, 0x1d, 0xd0, 0x00, 0xc0,
  0x1b, 0xd0, 0x00, 0xc0, 0x1b, 0xd0, 0x00, 0xc0, 0x17, 0xd0, 0x00, 0xc0,
  0x17, 0xd0, 0x00, 0xc0, 0x15, 0xd0, 0x00, 0xc0, 0x11, 0xd0, 0x00, 0xc0,
  0x0f, 0xd0, 0x00, 0xc0, 0x0f, 0xd0, 0x00, 0xc0, 0x0d, 0xd0, 0x00, 0xc0,
  0x09, 0xd0, 0x00, 0xc0, 0x09, 0xd0, 0x00, 0xc0, 0x05, 0xd0, 0x00, 0xc0,
  0x03, 0xd0, 0x00, 0xc0, 0x03, 0xd0, 0x00, 0xcf, 0x08, 0xe1, 0x02, 0xc0,
  0x00, 0xe0, 0x00, 0xc0, 0x07, 0xbb, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0,
  0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0,
  0x00, 0x00, 0x08, 0x95, 0xf8, 0x94, 0xff, 0xcf
};

static const uint8_t em2_bin[] = {
  0x0e, 0xc0, 0x15, 0xc0, 0x14, 0xc0, 0x13, 0xc0, 0x12, 0xc0, 0x11, 0xc0,
  0x10, 0xc0, 0x0f, 0xc0, 0x0e, 0xc0, 0x0d, 0xc0, 0x0c, 0xc0, 0x0b, 0xc0,
  0x0a, 0xc0, 0x09, 0xc0, 0x08, 0xc0, 0x11, 0x24, 0x1f, 0xbe, 0xcf, 0xe5,
  0xd2, 0xe0, 0xde, 0xbf, 0xcd, 0xbf, 0x02, 0xd0, 0x11, 0xc1, 0xe8, 0xcf,
  0x01, 0xd1, 0x00, 0xc0, 0xfd, 0xd0, 0x00, 0xc0, 0xfd, 0xd0, 0x00, 0xc0,
  0xf9, 0xd0, 0x00, 0xc0, 0xf9, 0xd0, 0x00, 0xc0, 0xf5, 0xd0, 0x00, 0xc0,
  0xf5, 0xd0, 0x00, 0xc0, 0xf1, 0xd0, 0x00, 0xc0, 0xf1, 0xd0, 0x00, 0xc0,
  0xed, 0xd0, 0x00, 0xc0, 0xed, 0xd0, 0x00, 0xc0, 0xe9, 0xd0, 0x00, 0xc0,
  0xe9, 0xd0, 0x00, 0xc0, 0xe5, 0xd0, 0x00, 0xc0, 0xe5, 0xd0, 0x00, 0xc0,
  0xe1, 0xd0, 0x00, 0xc0, 0xe1, 0xd0, 0x00, 0xc0, 0xdd, 0xd0, 0x00, 0xc0,
  0xdb, 0xd0, 0x00, 0xc0, 0xdb, 0xd0, 0x00, 0xc0, 0xd7, 0xd0, 0x00, 0xc0,
  0xd7, 0xd0, 0x00, 0xc0, 0xd3, 0xd0, 0x00, 0xc0, 0xd3, 0xd0, 0x00, 0xc0,
  0xd1, 0xd0, 0x00, 0xc0, 0xcd, 0xd0, 0x00, 0xc0, 0xcd, 0xd0, 0x00, 0xc0,
  0xc9, 0xd0, 0x00, 0xc0, 0xc7, 0xd0, 0x00, 0xc0, 0xc7, 0xd0, 0x00, 0xc0,
  0xc3, 0xd0, 0x00, 0xc0, 0xc3, 0xd0, 0x00, 0xc0, 0xc1, 0xd0, 0x00, 0xc0,
  0xbd, 0xd0, 0x00, 0xc0, 0xbb, 0xd0, 0x00, 0xc0, 0xbb, 0xd0, 0x00, 0xc0,
  0xb9, 0xd0, 0x00, 0xc0, 0xb5, 0xd0, 0x00, 0xc0, 0xb5, 0xd0, 0x00, 0xc0,
  0xb1, 0xd0, 0x00, 0xc0, 0xaf, 0xd0, 0x00, 0xc0, 0xaf, 0xd0, 0x00, 0xc0,
  0xad, 0xd0, 0x00, 0xc0, 0xa9, 0xd0, 0x00, 0xc0, 0xa7, 0xd0, 0x00, 0xc0,
  0xa7, 0xd0, 0x00, 0xc0, 0xa3, 0xd0, 0x00, 0xc0, 0xa3, 0xd0, 0x00, 0xc0,
  0xa1, 0xd0, 0x00, 0xc0, 0x9d, 0xd0, 0x00, 0xc0, 0x9b, 0xd0, 0x00, 0xc0,
  0x9b, 0xd0, 0x00, 0xc0, 0x97, 0xd0, 0x00, 0xc0, 0x97, 0xd0, 0x00, 0xc0,
  0x95, 0xd0, 0x00, 0xc0, 0x91, 0xd0, 0x00, 0xc0, 0x8f, 0xd0, 0x00, 0xc0,
  0x8f, 0xd0, 0x00, 0xc0, 0x8d, 0xd0, 0x00, 0xc0, 0x89, 0xd0, 0x00, 0xc0,
  0x87, 0xd0, 0x00, 0xc0, 0x87, 0xd0, 0x00, 0xc0, 0x83, 0xd0, 0x00, 0xc0,
  0x83, 0xd0, 0x00, 0xc0, 0x7f, 0xd0, 0x00, 0xc0, 0x7f, 0xd0, 0x00, 0xc0,
  0x7d, 0xd0, 0x00, 0xc0, 0x79, 0xd0, 0x00, 0xc0, 0x77, 0xd0, 0x00, 0xc0,
  0x77, 0xd0, 0x00, 0xc0, 0x75, 0xd0, 0x00, 0xc0, 0x71, 0xd0, 0x00, 0xc0,
  0x71, 0xd0, 0x00, 0xc0, 0x6d, 0xd0, 0x00, 0xc0, 0x6d, 0xd0, 0x00, 0xc0,
  0x69, 0xd0, 0x00, 0xc0, 0x69, 0xd0, 0x00, 0xc0, 0x65, 0xd0, 0x00, 0xc0,
  0x63, 0xd0, 0x00, 0xc0, 0x63, 0xd0, 0x00, 0xc0, 0x61, 0xd0, 0x00, 0xc0,
  0x5d, 0xd0, 0x00, 0xc0, 0x5d, 0xd0, 0x00, 0xc0, 0x59, 0xd0, 0x00, 0xc0,
  0x57, 0xd0, 0x00, 0xc0, 0x57, 0xd0, 0x00, 0xc0, 0x53, 0xd0, 0x00, 0xc0,
  0x53, 0xd0, 0x00, 0xc0, 0x4f, 0xd0, 0x00, 0xc0, 0x4f, 0xd0, 0x00, 0xc0,
  0x4d, 0xd0, 0x00, 0xc0, 0x49, 0xd0, 0x00, 0xc0, 0x47, 0xd0, 0x00, 0xc0,
  0x47, 0xd0, 0x00, 0xc0, 0x45, 0xd0, 0x00, 0xc0, 0x41, 0xd0, 0x00, 0xc0,
  0x3f, 0xd0, 0x00, 0xc0, 0x3f, 0xd0, 0x00, 0xc0, 0x3b, 0xd0, 0x00, 0xc0,
  0x3b, 0xd0, 0x00, 0xc0, 0x39, 0xd0, 0x00, 0xc0, 0x35, 0xd0, 0x00, 0xc0,
  0x33, 0xd0, 0x00, 0xc0, 0x33, 0xd0, 0x00, 0xc0, 0x2f, 0xd0, 0x00, 0xc0,
  0x2f, 0xd0, 0x00, 0xc0, 0x2d, 0xd0, 0x00, 0xc0, 0x29, 0xd0, 0x00, 0xc0,
  0x27, 0xd0, 0x00, 0xc0, 0x27, 0xd0, 0x00, 0xc0, 0x23, 0xd0, 0x00, 0xc0,
  0x23, 0xd0, 0x00, 0xc0, 0x21, 0xd0, 0x00, 0xc0, 0x1d, 0xd0, 0x00, 0xc0,
  0x1d, 0xd0, 0x00, 0xc0, 0x19, 0xd0, 0x00, 0xc0, 0x17, 0xd0, 0x00, 0xc0,
  0x17, 0xd0, 0x00, 0xc0, 0x15, 0xd0, 0x00, 0xc0, 0x11, 0xd0, 0x00, 0xc0,
  0x0f, 0xd0, 0x00, 0xc0, 0x0f, 0xd0, 0x00, 0xc0, 0x0d, 0xd0, 0x00, 0xc0,
  0x09, 0xd0, 0x00, 0xc0, 0x09, 0xd0, 0x00, 0xc0, 0x05, 0xd0, 0x00, 0xc0,
  0x03, 0xd0, 0x00, 0xc0, 0x03, 0xd0, 0x00, 0xcf, 0x08, 0xe1, 0x02, 0xc0,
  0x00, 0xe0, 0x00, 0xc0, 0x07, 0xbb, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0,
  0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0, 0x00, 0xc0,
  0x00, 0x00, 0x08, 0x95, 0xf8, 0x94, 0xff, 0xcf
};

unsigned int em_bin_len = 596;

static void blink_pin_forever(PIO pio, uint sm, uint offset, uint pin, uint freq) {
    blink_program_init(pio, sm, offset, pin);
    pio_sm_set_enabled(pio, sm, true);

    printf("Blinking pin %d at %d Hz\n", pin, freq);

    // PIO counter program takes 3 more cycles in total than we pass as
    // input (wait for n + 1; mov; jmp)
    pio->txf[sm] = (clock_get_hz(clk_sys) / (2 * freq)) - 3;
}

void flash(uint8_t hilo, unsigned int addr, uint8_t data)
{
    uint8_t out_buf[4] = {uint8_t(0x40 + 8 * hilo), uint8_t((addr >> 8) & 0xFF), uint8_t(addr & 0xFF), data};
    uint8_t in_buf[4];
    spi_write_read_blocking(spi0, out_buf, in_buf, 4);
}

void commit(unsigned int addr)
{
    uint8_t out_buf[4] = {0x4C, uint8_t((addr >> 8) & 0xFF), uint8_t(addr & 0xFF), 0};
    uint8_t in_buf[4];
    spi_write_read_blocking(spi0, out_buf, in_buf, 4);
}

#define LOW  0x00
#define HIGH 0x01

void write_flash_page(unsigned int page, const uint8_t *buff, int buf_size)
{
    int ind = 0;
    unsigned int addr = page;
    if (buf_size > 64) {
        printf("Buffer too large, page is 32 words (64 bytes)\n");
        return;
    }
    for (int i = 0 ; i < buf_size/2; i++) {
        flash(LOW, addr, buff[ind++]);
        flash(HIGH, addr, buff[ind++]);
        addr++;
    }
    // fill the rest of the page with 0xFF
    for (int i = buf_size/2; i < 32; i++) {
        flash(LOW, addr, 0xFF);
        flash(HIGH, addr, 0xFF);
        addr++;
    }
    commit(page);
}

void write_flash(const uint8_t *buff, int buf_size)
{
    unsigned int page = 0;
    int ind = 0;
    while (ind < buf_size) {
        int chunk_size = buf_size - ind > 64 ? 64 : buf_size - ind;
        write_flash_page(page, buff + ind, chunk_size);
        sleep_ms(5); // Twd_flash = 4.5ms, page 153 of datasheet
        ind += 64;
        page += 32;
    }
}

uint8_t flash_read(uint8_t hilo, unsigned int addr)
{
    uint8_t out_buf[4] = {uint8_t(0x20 + hilo * 8), uint8_t((addr >> 8) & 0xFF), uint8_t(addr & 0xFF), 0};
    //printf("out_buf: %02x %02x %02x %02x\n", out_buf[0], out_buf[1], out_buf[2], out_buf[3]);
    uint8_t in_buf[4];
    spi_write_read_blocking(spi0, out_buf, in_buf, 4);
    //printf("in_buf: %02x %02x %02x %02x\n", in_buf[0], in_buf[1], in_buf[2], in_buf[3]);
    return in_buf[3];
}

void flash_read_page(unsigned int addr)
{
    for (int i = 0; i < 32; i ++) {
        uint8_t low = flash_read(LOW, addr);
        uint8_t high = flash_read(HIGH, addr);
        printf("%02x%02x\n", low, high);
        addr++;
    }
    printf("\n");
}

void write_lfuse(uint8_t val)
{
    uint8_t write_lfuse[4] = {0xAC, 0xA0, 0x00, val};
    uint8_t in_buf[4];
    spi_write_read_blocking(spi0, write_lfuse, in_buf, 4);
    sleep_ms(5); // Twd_fuse = 4.5ms, page 153 of datasheet
}

uint8_t read_lfuse()
{
    uint8_t read_lfuse[4] = {0x50, 0x00, 0x00, 0x00};
    uint8_t in_buf[4];
    spi_write_read_blocking(spi0, read_lfuse, in_buf, 4);
    return in_buf[3];
}

void erase_chip()
{
    reset_target(true);
    uint8_t erase_chip[4] = {0xAC, 0x80, 0x00, 0x00};
    uint8_t in_buf[4];
    spi_write_read_blocking(spi0, erase_chip, in_buf, 4);
    sleep_ms(9); // Twd_erase = 9ms, page 153 of datasheet
    // pulse reset line
    reset_target(false);
    sleep_ms(20);
    reset_target(true);
}

void read_signature(uint8_t *out_sig)
{
    uint8_t read_sig[4] = {0x30, 0x00, 0x00, 0x00};
    uint8_t in_buf[4];
    spi_write_read_blocking(spi0, read_sig, in_buf, 4);
    //printf("in_buf: %02x %02x %02x %02x\n", in_buf[0], in_buf[1], in_buf[2], in_buf[3]);
    out_sig[0] = in_buf[3];
    read_sig[2] = 0x01;
    spi_write_read_blocking(spi0, read_sig, in_buf, 4);
    //printf("in_buf: %02x %02x %02x %02x\n", in_buf[0], in_buf[1], in_buf[2], in_buf[3]);
    out_sig[1] = in_buf[3];
    read_sig[2] = 0x02;
    spi_write_read_blocking(spi0, read_sig, in_buf, 4);
    //printf("in_buf: %02x %02x %02x %02x\n", in_buf[0], in_buf[1], in_buf[2], in_buf[3]);
    out_sig[2] = in_buf[3];
}

void prog_enable()
{
    reset_target(true);
    sleep_ms(50); // wait at least 20ms after reset
    uint8_t prog_enable[4] = {0xAC, 0x53, 0x00, 0x00};
    uint8_t in_buf[4];
    spi_write_read_blocking(spi0, prog_enable, in_buf, 4);
}

void program_attiny85()
{
    // wait for USB CDC connect
    while (!stdio_usb_connected()) {
        tight_loop_contents();
    }

    PIO pio = pio1;
    uint offset = pio_add_program(pio, &blink_program);
    printf("Loaded program at %d\n", offset);
    blink_pin_forever(pio, 0, offset, 6, 1000000);

    printf("Programming attiny85\n");
    spi_init(spi0, 100000);
    // SCK = GP2, MOSI = GP3, MISO = GP4, RESET = GP5
    gpio_set_function(2, GPIO_FUNC_SPI);
    gpio_set_function(3, GPIO_FUNC_SPI);
    gpio_set_function(4, GPIO_FUNC_SPI);
    gpio_init(5);
    gpio_set_dir(5, GPIO_OUT);

    printf("start pmode\n");
    prog_enable();
    printf("erasing chip\n");
    erase_chip();

    printf("start pmode\n");
    prog_enable();

    uint8_t sig[3];
    printf("read device signature\n");
    read_signature(sig);
    printf("sig: %02x %02x %02x\n", sig[0], sig[1], sig[2]);

    printf("writing lfuse\n");
    write_lfuse(0xC0);

    printf("reading lfuse\n");
    printf("lfuse: %02x\n", read_lfuse());

    printf("writing flash\n");
    write_flash(em1_bin, em_bin_len);

    printf("reading flash\n");
    flash_read_page(0);

    printf("end pmode\n");
    gpio_init(3);
    gpio_set_dir(3, GPIO_IN);
    reset_target(false);
    while (1) { tight_loop_contents(); }
}